# -*- coding: utf-8 -*-
# DO NOT EDIT! This file is auto-generated from
# https://github.com/mavlink/MAVSDK-Python/tree/main/other/templates/py
from ._base import AsyncBase
from . import core_pb2, core_pb2_grpc
from enum import Enum


class ConnectionState:
    """
     Connection state type.

     Parameters
     ----------
     uuid : uint64_t
          UUID of the vehicle

     is_connected : bool
          Whether the vehicle got connected or disconnected

     """

    

    def __init__(
            self,
            uuid,
            is_connected):
        """ Initializes the ConnectionState object """
        self.uuid = uuid
        self.is_connected = is_connected

    def __equals__(self, to_compare):
        """ Checks if two ConnectionState are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # ConnectionState object
            return \
                (self.uuid == to_compare.uuid) and \
                (self.is_connected == to_compare.is_connected)

        except AttributeError:
            return False

    def __str__(self):
        """ ConnectionState in string representation """
        struct_repr = ", ".join([
                "uuid: " + str(self.uuid),
                "is_connected: " + str(self.is_connected)
                ])

        return f"ConnectionState: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcConnectionState):
        """ Translates a gRPC struct to the SDK equivalent """
        return ConnectionState(
                
                rpcConnectionState.uuid,
                
                
                rpcConnectionState.is_connected
                )

    def translate_to_rpc(self, rpcConnectionState):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcConnectionState.uuid = self.uuid
            
        
        
        
            
        rpcConnectionState.is_connected = self.is_connected
            
        
        


class PluginInfo:
    """
     Plugin info type.

     Parameters
     ----------
     name : std::string
          Name of the plugin

     address : std::string
          Address where the plugin is running

     port : int32_t
          Port where the plugin is running

     """

    

    def __init__(
            self,
            name,
            address,
            port):
        """ Initializes the PluginInfo object """
        self.name = name
        self.address = address
        self.port = port

    def __equals__(self, to_compare):
        """ Checks if two PluginInfo are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # PluginInfo object
            return \
                (self.name == to_compare.name) and \
                (self.address == to_compare.address) and \
                (self.port == to_compare.port)

        except AttributeError:
            return False

    def __str__(self):
        """ PluginInfo in string representation """
        struct_repr = ", ".join([
                "name: " + str(self.name),
                "address: " + str(self.address),
                "port: " + str(self.port)
                ])

        return f"PluginInfo: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcPluginInfo):
        """ Translates a gRPC struct to the SDK equivalent """
        return PluginInfo(
                
                rpcPluginInfo.name,
                
                
                rpcPluginInfo.address,
                
                
                rpcPluginInfo.port
                )

    def translate_to_rpc(self, rpcPluginInfo):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcPluginInfo.name = self.name
            
        
        
        
            
        rpcPluginInfo.address = self.address
            
        
        
        
            
        rpcPluginInfo.port = self.port
            
        
        




class Core(AsyncBase):
    """
     Access to the connection state and running plugins.

     Generated by dcsdkgen - MAVSDK Core API
    """

    # Plugin name
    name = "Core"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = core_pb2_grpc.CoreServiceStub(channel)

    

    async def connection_state(self):
        """
         Subscribe to 'connection state' updates.

         Yields
         -------
         connection_state : ConnectionState
              Connection state

         
        """

        request = core_pb2.SubscribeConnectionStateRequest()
        connection_state_stream = self._stub.SubscribeConnectionState(request)

        try:
            async for response in connection_state_stream:
                

            
                yield ConnectionState.translate_from_rpc(response.connection_state)
        finally:
            connection_state_stream.cancel()

    async def list_running_plugins(self):
        """
         Get a list of currently running plugins.

         Returns
         -------
         plugin_info : [PluginInfo]
              Plugin info

         
        """

        request = core_pb2.ListRunningPluginsRequest()
        response = await self._stub.ListRunningPlugins(request)

        

        plugin_info = []
        for plugin_info_rpc in response.plugin_info:
            plugin_info.append(PluginInfo.translate_from_rpc(plugin_info_rpc))

        return plugin_info
            